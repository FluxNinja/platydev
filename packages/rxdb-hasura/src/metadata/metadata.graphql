fragment coreTable on metadata_table {
  table_name
  table_schema
}

fragment column on metadata_column_info {
  column_name
  udt_name
  is_nullable
}

fragment table on metadata_table {
  ...coreTable
  primaryKey {
    constraint_name
    columns {
      column_name
    }
  }
  indexes {
    index_name
    columns {
      column_name
    }
  }
  config {
    title
    description
    icon
    document_title
    document_label
    component
  }
  propertiesConfig(order_by: { order: asc }) {
    order
    property_name
    title
    description
    icon
    read_component
    read_component_options
    edit_component
    edit_component_options
  }
  computedProperties {
    name
    type
    nullable
    transformation
    template
  }
  canSelect_aggregate {
    aggregate {
      count
    }
  }
  canInsert_aggregate {
    aggregate {
      count
    }
  }
  canUpdate_aggregate {
    aggregate {
      count
    }
  }
  relationships {
    rel_name
    rel_type
    mapping {
      column {
        ...column
      }
      remoteTable {
        ...coreTable
      }
      remote_column_name
    }
  }
  columns {
    ...column
    primaryKey {
      constraint_name
    }
    canSelect {
      role_name
    }
    canInsert {
      role_name
    }
    canUpdate {
      role_name
    }
    config {
      json_schema
    }
  }
}

# * Already filtered according to user permissions.
# * > only maps the `public` schema
# TODO move to permission: only allow users to see the `public` schema
# * > need an `updated_at` column
# ! > need an `id` column -> what if the primary key is not the id column?
query metadata {
  metadata_table(
    where: {
      _and: [
        { columns: { column_name: { _eq: "updated_at" } } }
        # TODO make it work with other id names e.g. string
        { columns: { column_name: { _eq: "id" } } }
        { columns: { column_name: { _eq: "deleted" } } }
      ]
    }
  ) {
    ...table
  }
}
