{{- $configFileEnabled := include "common.tplvalues.render" (dict "value" .Values.configFile.enabled "context" $) }}
{{- $fullname := include "standard-service.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "standard-service.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "standard-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{/* # TODO See https://v3.helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments */}}
        rollme: {{ randAlphaNum 5 | quote }}
    {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "standard-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "standard-service.serviceAccountName" . }}
      volumes:
      {{- if $configFileEnabled }}
        - name: config-file
          configMap:
            name: "{{ $fullname }}"
            items:
              - key: {{ .Values.configFile.name }}
                path: {{ .Values.configFile.name }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        {{- if .Values.image }}
          image: {{ .Values.image }}
        {{- else }}
          image: "{{ .Values.imageConfig.repository }}:{{ .Values.imageConfig.tag | default .Chart.AppVersion }}"
        {{- end }}
          imagePullPolicy: {{ .Values.imageConfig.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.targetPort }}
              protocol: TCP
          volumeMounts:
          {{- if $configFileEnabled }}
            - name: config-file
              mountPath: "{{ .Values.configFile.path }}/{{ .Values.configFile.name }}"
              subPath: "{{ .Values.configFile.name }}"
          {{- end }}
          env:            
            {{- if .Values.connect.hasura.enabled }}
            - name: "{{- .Values.connect.hasura.envName.endpoint }}"
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.configMap "context" $) }}"
                  key: endpoint
            - name: "{{- .Values.connect.hasura.envName.secret }}"
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.secret "context" $) }}"
                  key: adminSecret
            {{- end }}
            {{- if .Values.connect.minio.enabled }}
            - name: "{{- .Values.connect.minio.envName.endpoint }}"
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.minio.configMap "context" $) }}"
                  key: endpoint
            - name: "{{- .Values.connect.minio.envName.bucket }}"
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.minio.configMap "context" $) }}"
                  key: defaultBuckets
            - name: "{{- .Values.connect.minio.envName.key }}"
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.minio.secret "context" $) }}"
                  key: access-key
            - name: "{{- .Values.connect.minio.envName.secret }}"
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.minio.secret "context" $) }}"
                  key: secret-key
            - name: "{{- .Values.connect.minio.envName.ssl }}"
              value: "false"
            {{- end }}
            {{- if .Values.connect.rabbitmq.enabled }}
            - name: "{{- .Values.connect.rabbitmq.envName.host }}"
              value: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.rabbitmq.host "context" $) }}"
            - name: "{{- .Values.connect.rabbitmq.envName.user }}"
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.rabbitmq.configMap "context" $) }}"
                  key: username
            - name: "{{- .Values.connect.rabbitmq.envName.password }}"
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.rabbitmq.secret "context" $) }}"
                  key: rabbitmq-password
            {{- end }}
            {{- if .Values.extraEnv }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnv "context" $) | nindent 12 }}
            {{- end }}
            {{/* 
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          */}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
