imageConfig:
  repository: nhost/hasura-backend-plus
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: latest

## Ingress for load balancer
ingress:
  enabled: false
##  Ingress labels
##
#   labels:
#     dns: "route53"

##  Ingress annotations
##
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     kubernetes.io/tls-acme: "true"

##  Ingress hostnames
## Must be provided if Ingress is enabled
##
#  hosts:
#    - name: my-service.domain1.com
#      path: /
#      tls: false
#    - name: my-service.domain2.com
#      path: /
#
#      ## Set this to true in order to enable TLS on the ingress record
#      tls: true
#
#      ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
#      ## Secrets must be added manually to the namespace
#      tlsSecret: my-service.domain2-tls

serverUrl: localhost:4200

limiter:
  maxRequests: 1000
  timeFrame: 900000

emails:
  enabled: false
  smtp:
    host: null
    port: 587
    secure: false
    user: null
    sender: null
    authMethod: 'PLAIN'
    password: null

storage:
  enabled: true
  external:
    enabled: false
    # endpoint: 's3-endpoint.com'
    accessKey: null
    secretKey: null
    bucket: hasura-plus
    ssl: true
  rules: null

auth:
  enabled: true
  localUsers: true
  changeEmail: true
  notifyEmailChange: false
  anonymousUsers: false
  allowUserSelfDelete: false
  verifyEmails: false
  lostPassword: false
  registration:
    allowedEmailDomains: []
    defaultUserRole: user
    defaultAnonymousRole: anonymous
    autoActivateNewUsers: true
    hibp: false
    registrationCustomFields: []
    minPasswordLength: 3
    defaultAllowedRoles: null # defaults to auth.registration.defaultUserRole + me
    allowedRoles: null # defaults to auth.registration.defaultAllowedRoles
  cookies:
    secret: null
    secure: false
    sameSite: lax # true, false, lax, strict, none
  jwt:
    algorithm: HS256
    key: null # autogenerated
    claims:
      namespace: 'https://hasura.io/jwt/claims'
    expires:
      in: 15
      refresh: 43200
    customFields: []
  mfa:
    enabled: true
    issuer: HBP
  providers:
    redirect:
      success: null
      error: null
    github:
      enabled: false
      clientId: null
      clientSecret: null
      authenticationUrl: null
      tokenUrl: null
      userProfileUrl: null
    google:
      enabled: false
      clientId: null
      clientSecret: null
    facebook:
      enabled: false
      clientId: null
      clientSecret: null
    linkedin:
      enabled: false
      clientId: null
      clientSecret: null
    windowsLive:
      enabled: false
      clientId: null
      clientSecret: null
    twitter:
      enabled: false
      consumerKey: null
      consumerSecret: null
    apple:
      enabled: false
      clientId: null
      teamId: null
      keyId: null
      privateKey: null

extraEnv: []

minio:
  enabled: true
  defaultBuckets: hasura-plus
  # accessKey:
  #   password: <minio-access-key>
  # secretKey:
  #   password: <minio-secret-key>
connect:
  hasura: # connect to an hasura instance not managed by this chart, but in the same cluster
    enabled: false
    # configMap: '{{ .Release.Name }}-hasura'
    # secret: '{{ .Release.Name }}-hasura'
    configMap: 'hasura'
    secret: 'hasura'
    postgresql:
      secret: postgresql
    keys:
      endpoint: endpoint
      adminSecret: adminSecret
      databaseUrl: databaseUrl
      jwt:
        key: jwt.key
        algorithm: jwt.algorithm
        claims:
          namespace: jwt.claims.namespace

hasura:
  enabled: true
  postgresql:
    postgresqlExtendedConf:
      search_path: auth
    initdbScripts:
      hbp-init.sql: |
        CREATE SCHEMA IF NOT EXISTS auth;
        CREATE SCHEMA IF NOT EXISTS storage;
  # If not enabled, set the following values to connect to an instance outside of the cluster:
  # endpoint: "https://my-hasura.com
  # adminSecret: "my-admin-secret"
  # databaseUrl: "postgres://username:password@host:port/database"
  # Make also sure auth.jwt reflects your Hasura config

replicaCount: 1

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
