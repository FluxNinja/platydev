apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hasura-backend-plus.fullname" . }}
  labels:
    {{- include "hasura-backend-plus.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "hasura-backend-plus.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        # checksum/minio-config: {{ include (print $.Template.BasePath "/minio-config.yaml") . | sha256sum }}
        # Missing: hasura secrets
        # TODO See https://v3.helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments
        rollme: {{ randAlphaNum 5 | quote }}
    {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "hasura-backend-plus.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "hasura-backend-plus.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        {{- if .Values.image }}
          image: {{ .Values.image }}
        {{- else }}
          image: "{{ .Values.imageConfig.repository }}:{{ .Values.imageConfig.tag | default .Chart.AppVersion }}"
        {{- end }}
          imagePullPolicy: {{ .Values.imageConfig.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: AUTO_MIGRATE
              value: "{{ .Values.autoMigrate }}"
            {{- if .Values.serverUrl }}
            - name: SERVER_URL
              value: "{{- include "common.tplvalues.render" (dict "value" .Values.serverUrl "context" $) }}"            
            {{- end }}
            {{- if .Values.hasura.enabled }}
            - name: HASURA_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: "{{- .Release.Name }}-hasura"
                  key: endpoint
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{- .Release.Name }}-hasura"
                  key: adminSecret
            - name: JWT_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{- .Release.Name }}-hasura"
                  key: jwt.key
            - name: JWT_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  name: "{{- .Release.Name }}-hasura"
                  key: jwt.algorithm
            {{- else }}
              {{- if .Values.connect.hasura.enabled }}
            - name: HASURA_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.configMap "context" $) }}"
                  key: endpoint
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.secret "context" $) }}"
                  key: adminSecret
            - name: JWT_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.secret "context" $) }}"
                  key: jwt.key
            - name: JWT_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.hasura.secret "context" $) }}"
                  key: jwt.algorithm
              {{- end }}
            {{- end }}
            {{- if .Values.minio.enabled }}
            - name: S3_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: "{{- .Release.Name }}-minio"
                  key: endpoint
            - name: S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: "{{- .Release.Name }}-minio"
                  key: defaultBuckets
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: "{{- .Release.Name }}-minio"
                  key: access-key
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{- .Release.Name }}-minio"
                  key: secret-key
            - name: S3_SSL_ENABLED
              value: "false"
            {{- else }}
              {{- if .Values.connect.minio.enabled }}
            - name: S3_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.minio.configMap "context" $) }}"
                  key: endpoint
            - name: S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.minio.configMap "context" $) }}"
                  key: defaultBuckets
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.minio.secret "context" $) }}"
                  key: access-key
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{- include "common.tplvalues.render" (dict "value" .Values.connect.minio.secret "context" $) }}"
                  key: secret-key
            - name: S3_SSL_ENABLED
              value: "false"
              {{- end }}          
            {{- end }}          
            {{- if .Values.extraEnv }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnv "context" $) | nindent 12 }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
